import java.util.*;

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

/**
 * @author Nithin
 *
 */
public class SymbolTable 
{
	BufferedReader br = null;
	Pattern[] p = new Pattern[7];
	Matcher mat;
	/**
	 * Initializes regular expressions
	 */
	public SymbolTable()
	{
		p[0] = Pattern.compile("int");
		p[1] = Pattern.compile("long");
		p[2] = Pattern.compile("float");
		p[3] = Pattern.compile("double");
		p[4] = Pattern.compile("String");
		p[5] = Pattern.compile("byte");
		p[6] = Pattern.compile("short");
	}
	
	/**
	 * @return Returns an arraylist of symbols with the data declarations
	 */
	public ArrayList<Symbol> symbolReader() 
	{
		String currentLine;
		String[] splitString;
		ArrayList<Symbol> matches = new ArrayList<Symbol>();
		ArrayList<Integer> line = new ArrayList<Integer>();
		ArrayList<String> keywords = new ArrayList<String>();
		String last;
		int count = 1;
		String curDir = System.getProperty("user.dir");
		File GradeList = new File("GradeList.txt");
		System.out.println("Current sys dir: " + curDir);
		File listed = new File("JavaKeywords.txt");
		if (!listed.exists()) {
		    try {
				throw new FileNotFoundException("Failed to find file: " + 
				    GradeList.getAbsolutePath());
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		//Sorting the JavaKeywords.txt file
		try
		{
			
			br = new BufferedReader(new FileReader("JavaKeywords.txt"));
			while ((currentLine = br.readLine()) != null)
			{
				//System.out.println(currentLine);
				//Below is for every element after the first
				if (keywords.size() != 0)
				{
					for (int i = 0; i < keywords.size(); i++)
					{
						//Comparison at index 0
						if (i == 0)
						{
							if (currentLine.compareTo(keywords.get(i)) < 0)
							{
								keywords.add(0, currentLine.trim());
								//System.out.println("Added: " + currentLine);
								//System.out.println(keywords);
								break;
							}
						}
						//Comparison at last index
						if (i == keywords.size()-1)
						{
							if (currentLine.compareTo(keywords.get(i)) > 0)
							{
								keywords.add(currentLine.trim());
								//System.out.println("Added: " + currentLine);
								//System.out.println(keywords);
								break;
							}
						}
						//Comparison for everything in between
						else
						{
							if (currentLine.compareTo(keywords.get(i)) > 0 && currentLine.compareTo(keywords.get(i+1)) < 0)
							{
								keywords.add(i+1, currentLine.trim());
								//System.out.println("Added: " + currentLine);
								//System.out.println(keywords);
								break;
							}
						}
					}
				}
				//For the first element
				else
				{
					keywords.add(currentLine.trim());
				}
			}
			//Solely for testing/console purposes
			for (String w : keywords)
			{
				System.out.println(w);
			}
			//Read in the Primitives.java file
			br = new BufferedReader(new FileReader("Primitives.java"));
			while ((currentLine = br.readLine()) != null)
			{
				//Split each line into constituent elements in array
				splitString = currentLine.split(" ");
				splitString[0] = splitString[0].trim();
				last = splitString[splitString.length - 1];
				//removes semicolon from variable name
				if (last.endsWith(";"))
				{
					last = last.substring(0, last.length()-1);
				}
				splitString[splitString.length - 1] = last;
				//Looks for matches
				for (int i = 0; i < p.length; i++)
				{
					mat = p[i].matcher(splitString[0]);
					if (mat.matches() && binarySearch(keywords, 0, keywords.size(), splitString[1]) == -1)
					{
						line.add(count);
						System.out.println(splitString[0] + " " + splitString[1] + " " + line);
						matches.add(new Symbol(splitString[0], splitString[1], line));
						line.remove(0);
					}
				}
				count++;
			}
		}
		catch(FileNotFoundException e)
		{
			System.out.println("File not found!");
		}
		catch(IOException er)
		{
			er.printStackTrace();
		}
		return matches;
	}
	
	//Adapted from Binary Search notes
	public static int binarySearch(ArrayList<String> sorted, int first, int upto, String key) 
	{    
	    int mid = 0;
		while (first < upto) 
	    {
	        mid = (first + upto) / 2;  // Compute mid point.
	        if (key.compareTo(sorted.get(mid)) < 0) 
	        {
	            upto = mid;     // repeat search in bottom half.
	        } 
	        else if (key.compareTo(sorted.get(mid)) > 0) 
	        {
	            first = mid + 1;  // Repeat search in top half.
	        } 
	        else 
	        {
	            return mid;     // Found it. return position         
	        }
	    }
	    return -1;    // Failed to find key 
	}
	
	/**
	 * @author Nithin
	 *
	 */
	public class Symbol
	{
		String var;
		String n;
		ArrayList<Integer> lineNum;
		/**
		 * @param variable passed
		 * @param name passed
		 * @param lineNumber passed
		 */
		public Symbol(String variable, String name, ArrayList<Integer> lineNumber)
		{
			var = variable;
			n = name;
			lineNum = lineNumber;
		}
		
		/**
		 * @return variable type
		 */
		public String getVar()
		{
			return var;
		}
		
		/**
		 * @return variable name
		 */
		public String getName()
		{
			return n;
		}
		
		/**
		 * @return return line number
		 */
		public ArrayList<Integer> getLines()
		{
			return lineNum;
		}
	}
	
	public static void main(String[] args) throws FileNotFoundException
	{
		SymbolTable s = new SymbolTable();
		s.symbolReader();		
	}
}
